<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init


u_width = 0;
u_height = 0;

grid_rooms = noone;

characters_list = noone;

u_action_round    = 0;
u_first_character = 0;
u_curr__character = 0;

//For draw
mroom_mouseover = noone;

action_1 = action_t.COUNT;
action_1_data = noone;
action_2 = action_t.COUNT;
action_2_data = noone;


//Initialize global, is noone only on first round
global.minigame_success = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Constants

enum room_type_t
    {
    r_entrance, r_exit, r_empty, //Special
    r_soundproof, //Miningameless
    r_mechanical, r_medical, r_death, r_mine_on, r_mine_off, //Minigames
    COUNT
    };
    
    
//Sprites
array_spr = array_create(room_type_t.COUNT);
array_spr = array_fill(array_spr, spr_Room_empty);

array_spr[room_type_t.r_entrance]   = spr_Room_entrance;
array_spr[room_type_t.r_exit]       = spr_Room_exit;
array_spr[room_type_t.r_mechanical] = spr_Room_mechanical;
array_spr[room_type_t.r_medical]    = spr_Room_medical;
array_spr[room_type_t.r_death]      = spr_Room_death;
array_spr[room_type_t.r_soundproof] = spr_Room_soundproof;
array_spr[room_type_t.r_mine_on]    = spr_Room_mine_on;
array_spr[room_type_t.r_mine_off]   = spr_Room_mine_off;



//Names
array_str_name = array_create(room_type_t.COUNT);
array_str_name = array_fill(array_spr, "Empty");

array_str_name[room_type_t.r_entrance]   = "Entrance";

array_str_name[room_type_t.r_exit]       = "Exit";
array_str_name[room_type_t.r_mechanical] = "Mechanical";
array_str_name[room_type_t.r_medical]    = "Medical";
array_str_name[room_type_t.r_death]      = "Death";
array_str_name[room_type_t.r_soundproof] = "Sound proof";
array_str_name[room_type_t.r_mine_on]    = "Mine (ON)";
array_str_name[room_type_t.r_mine_off]   = "Mine (OFF)";

//Descriptions
array_str_descr = array_create(room_type_t.COUNT);
array_str_descr = array_fill(array_spr, "");

array_str_descr[room_type_t.r_entrance]   = "Nothing happens here.";

array_str_descr[room_type_t.r_exit]       = "Come here when you get the Broom.";
array_str_descr[room_type_t.r_mechanical] = "This room is fancy, but it does nothing.";
array_str_descr[room_type_t.r_medical]    = "There's plenty of medical equipment here. #WIN: Your character is healed.";
array_str_descr[room_type_t.r_death]      = "Sounds pretty deadly, it'd be wise to not enter this room. #WIN: Your character is injured.#LOSE: Your character dies.";
array_str_descr[room_type_t.r_soundproof] = "This room blocks outgoing sound. It will prevent speak messages from reaching characters on the other side.";
array_str_descr[room_type_t.r_mine_on]    = "There's an active mine in that room! #LOSE: Your character is injured.";
array_str_descr[room_type_t.r_mine_off]   = "There's a deactivated mine in that room, I could use it against my opponents... #WIN: The mine gets activated.";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_exists(grid_rooms, ds_type_grid) ds_grid_destroy(grid_rooms); 
if ds_exists(characters_list, ds_type_list) ds_list_destroy(characters_list);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Makes sure this isn't called the first time this room is entered
if(global.minigame_success != noone)
    {
    rc_minigame_finished(global.minigame_success);
    }
//Fade in effect
var fader = fader_create(2, c_black, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Room mouseover
var f_bar_w  = window_get_width() / 6;
var f_bar_orig_x  = f_bar_w * 5;
var f_bar_height = window_get_height();
var f_bar_inner_max_width = f_bar_w - 32;//Double of f_x's value added to f_bar_origx

if(mroom_mouseover != noone)
    {
    draw_set_alpha(1);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    var f_y = 16;
    var f_x = f_bar_orig_x + 16;
    var room_type = mroom_mouseover.room_type;
    
    draw_set_color(c_dkgray);
    draw_rectangle(f_bar_orig_x, 0, f_bar_orig_x + f_bar_w, f_bar_height, false);
    draw_set_color(c_white);
    
    var f_vspacing = 16;
    
    if mroom_mouseover.b_revealed
        {
        draw_sprite_ext(spr_Room,                      0, f_x, f_y, .5, .5, 0, c_white, 1)
        draw_sprite_ext(mroom_mouseover.sprite_index, -1, f_x, f_y, .5, .5, 0, c_white, 1)
        draw_sprite_ext(spr_Room,                      1, f_x, f_y, .5, .5, 0, c_white, 1)
        draw_sprite_ext(spr_Room,                      2, f_x, f_y, .5, .5, 0, c_white, 1)
        }
    
    
    
    f_y += sprite_get_height(mroom_mouseover.sprite_index) / 2;
    f_y += f_vspacing;
    
    draw_set_font(fnt_arial24);
    
    if mroom_mouseover.b_revealed
        { draw_text_ext(f_x, f_y, array_str_name [room_type], 25, f_bar_inner_max_width); }
    else
        { draw_text_ext(f_x, f_y, "Unknown room", 25, f_bar_inner_max_width); }
    
    f_y += f_vspacing * 4;
    
    draw_set_font(fnt_arial12);
    if mroom_mouseover.b_revealed
        { draw_text_ext(f_x, f_y, array_str_descr[room_type], 14, f_bar_inner_max_width); }
    else
        { draw_text_ext(f_x, f_y, "Move to this room or use the look action in order to reveal its content.", 14, f_bar_inner_max_width); }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
