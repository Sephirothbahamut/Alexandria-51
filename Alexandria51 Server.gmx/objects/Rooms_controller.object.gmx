<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Constants

enum room_type_t
    {
    r_entrance, r_exit, r_empty, //Special
    r_soundproof, //Miningameless
    r_mechanical, r_medical, r_death, r_mine_on, r_mine_off, //Minigames
    COUNT
    };
    
//Sprites
array_spr = array_create(room_type_t.COUNT);
array_spr = array_fill(array_spr, spr_Room_empty);

array_spr[room_type_t.r_entrance]   = spr_Room_entrance;
array_spr[room_type_t.r_exit]       = spr_Room_exit;
array_spr[room_type_t.r_mechanical] = spr_Room_mechanical;
array_spr[room_type_t.r_medical]    = spr_Room_medical;
array_spr[room_type_t.r_death]      = spr_Room_death;
array_spr[room_type_t.r_soundproof] = spr_Room_soundproof;
array_spr[room_type_t.r_mine_on]    = spr_Room_mine_on;
array_spr[room_type_t.r_mine_off]   = spr_Room_mine_off;

//Spawning chances
array_chance = array_create(room_type_t.COUNT);
array_chance = array_fill(array_spr, spr_Room_empty);

// Assign weights
array_chance[room_type_t.r_entrance]   = 0;
array_chance[room_type_t.r_exit]       = 0;
array_chance[room_type_t.r_empty]      = 3;
array_chance[room_type_t.r_mechanical] = 0;
array_chance[room_type_t.r_medical]    = 1;
array_chance[room_type_t.r_death]      = 1;
array_chance[room_type_t.r_soundproof] = 3;
array_chance[room_type_t.r_mine_on]    = 2;
array_chance[room_type_t.r_mine_off]   = 2;

// Recalc in %
var f_tot = 0;
for(var u = room_type_t.r_empty; u &lt; room_type_t.COUNT; u++)
    {
    f_tot += array_chance[u];
    }
for(var u = room_type_t.r_empty; u &lt; room_type_t.COUNT; u++)
    {
    array_chance[u] /= f_tot;
    }

// Turn in cumulative %
for(var u = room_type_t.r_empty + 1; u &lt; room_type_t.COUNT; u++)
    {
    array_chance[u] += array_chance[u - 1];
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init

u_width = 0;
u_height = 0;

grid_rooms = noone;

characters_list = noone;

u_action_round    = 0;
u_first_character = 0;
u_curr__character = 0;

b_running_actions = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_exists(grid_rooms, ds_type_grid) ds_grid_destroy(grid_rooms); 
if ds_exists(characters_list, ds_type_list) ds_list_destroy(characters_list);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Delay final operations of creation to ensure all clients have created the level on their side
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop accepting actions
show_debug_message("Stop receiving actions wait");

//Create actions buffer
var buffer = server_create_buffer(net_t.actions_run);


buffer_write(buffer, buffer_u8, u_first_character);

buffer_write(buffer, buffer_u8, ds_list_size(characters_list));
for(var u = 0; u &lt; ds_list_size(characters_list); u++)
    {
    var character =  characters_list[|u];
    rc_write_actions(character, buffer);
    }

server_send_all(buffer);
buffer_delete(buffer);

//Start running actions
b_running_actions = true;
u_curr__character = u_first_character;
rc_action_run_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Note
/*
Event called when all players have completed the minigame
sends the effects to all players
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send success/failure effects to clients and run locally
//send effects
var buffer = server_create_buffer(net_t.minigame_effects);

buffer_write(buffer, buffer_u8, ds_list_size(characters_list));
for(var u = 0; u &lt; ds_list_size(characters_list); u++)
    {
    var character =  characters_list[|u];
    buffer_writeu8(buffer, character.b_minigame_won);
    }

server_send_all(buffer);
buffer_delete(buffer);

rc_run_effects();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Note
/*
Event called when all players have completed running the actions
starts the room minigame phase
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// per-player random minigame


for(var u = 0; u &lt; ds_list_size(Rooms_controller.characters_list); u++)
    {
    var character = Rooms_controller.characters_list[| u];
    
    var buffer = server_create_buffer(net_t.minigame_start);
    
    //Exclude empty, entrance, exit
    var room_type = character.mroom_current.room_type;
    if(room_type &gt; room_type_t.r_mechanical and not character_is_dead(character))
        {
        var minigame_id = u_random(minigame_t.COUNT);
        buffer_writeu8(buffer, minigame_id);
        }
    else { buffer_writeu8(buffer, minigame_t.COUNT); }
    
    server_send_to(character.client_owner, buffer);
    buffer_delete(buffer);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Note
/*
Event called when the game starts OR all players have completed running the
effects of minigames, starts the next turn.
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Wait actions

show_debug_message("Start receiving actions wait");
with(Character) 
    { //Variables to reset for each turn 
    action_1 = action_t.pass;
    action_2 = action_t.pass;
    b_minigame_won = false;
    b_done = false;
    }
var buffer = server_create_buffer(net_t.actions_wait);
server_send_all(buffer);
buffer_delete(buffer);


alarm[0] = 65 * room_speed;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Advance turn bar

u_action_round = -1; //Starts at -1 because the character with 1st turn will immediately cause it to increase to 0

u_first_character++;
if u_first_character &gt;= ds_list_size(characters_list)
    {
    u_first_character = 0;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
